#deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-demo
  # Deployment指定部署在dev的Namespace下
  namespace: dev
spec:
  selector:
    # 匹配标签（就是这个Deployment只管理带有app=springboot-demo标签的Pod）
    matchLabels:
      app: springboot-demo
  replicas: 1
  # 创建Pod的配置
  template:
    metadata:
      labels:
        # 为Pod打上app=springboot-demo标签（如果没有这个Deployment将无法部署）
        app: springboot-demo
    spec:
      containers:
      - name: springboot-demo
        image: chiangfire/springboot-demo:20191122051537
        ports:
        # 注意：这个端口要和服务本身启动起来的端口相同
        - containerPort: 2019
---
#service
apiVersion: v1
kind: Service
metadata:
  name: springboot-demo
  # Service指定部署在dev的Namespace下
  namespace: dev
spec:
  ports:
  - port: 80
    protocol: TCP
    # 注意：这个端口要和服务本身启动起来的端口相同
    targetPort: 2019
  selector:
    # 匹配标签（就是这个Service只管理带有app=springboot-demo标签的Pod）
    app: springboot-demo
  type: ClusterIP

---
#ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: springboot-demo
  # Ingress指定部署在dev的Namespace下
  namespace: dev
spec:
  rules:
  # 访问这个域名 Ingress 会自动代理到当前服务（注意：Ingress要提前部署好）
  - host: web.springbootdemo.com
    http:
      paths:
      - path: /
        backend:
          serviceName: springboot-demo
          servicePort: 80